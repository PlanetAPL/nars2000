Version 0.4.0.xx consists of the following Builds:


Build #1136 -- Version 0.4.0.xx
-------------------------------

* Implement Anonymous Functions/Operators
* Handle STACK FULL Via EXCEPTION_STACK_OVERFLOW

Directory trunk:

AFOFNS.C:
  New module to hold AFO-specific functions.

APLERRORS.H:
  Delete <ERRMSG_STACK_OVERFLOW> in favor of <ERRMSG_STACK_FULL>.

ASSIGN.C:
  In <AssignName_EM>, handle assigning Name{is}{AFO}
  In <GetNameType>, handle AFOs.

COMPRO.H:
  Include prototype file for new module.

CS_PARSE.H:
  Update the copyright year.
  Rename old Boolean flag.
  Include new Boolean flag for a main stmt ctrl struc so as to disallow them in AFOs.

CS_PARSE.PROTO:
  Fill in missing prototypes.

CS_PARSE.Y:
  Include <cs_parse.proto> instead of individual prototypes.
  Rename <ERRMSG_STACK_OVERFLOW> to <ERRMSG_STACK_FULL>.
  In <cs_yylex>, mark ctrl strucs so as to disallow them in AFOs.
  Rename old Boolean flag.

DISPDBG.C:
  In <GetTokenTypeName>, handle new tokens.
  In <DisplayFcnSub>, handle AFOs.

DISPLAY.C:
  Define new routine to handle display in AFOs.

EDITFCN.C:
  In <FEWndProc>, move common code to <FreeVirtUnlink>.
  Define new argument to <Tokenize_EM> to handle AFOs.
  Pass all zero <SF_Fcns> to <Tokenize_EM>.

ENUMS.H:
  Improve comments.
  Delete <EXCEPTION_STACK_FULL> in favor of <EXCEPTION_STACK_OVERFLOW>.
  Move <DFN_TYPES> from <fh_parse.h> to <enums.h> so we can use it in prototypes.
  Move <PTDMEMVIRTENUM> from <sessman.c> to <enums.h> so we can use it in prototypes.

EXCEPT.C:
  Delete <EXCEPTION_STACK_FULL> in favor of <EXCEPTION_STACK_OVERFLOW>.

EXECDFN.C:
  In <ExecDfnOprGlb_EM_YY>, if executing an AFO, activate/restore the local <HASHTABSTR>,
    and pass the AFOs flag to the <SiS>
  Define new argument to <Tokenize_EM> to handle AFOs.
  In <ExecuteFunction_EM_YY>, handle non-displayable results from AFOs.

EXECFNS.C:
  In <ExecuteFn0>, handle niladic AFOs.
  In <ExecFunc_EM_YY>, handle AFOs.
  In <ExecFuncStrLine_EM_YY>, handle AFOs.

EXECMFN.C:
  Delete argument to <AllocSymTab> to initialize constant STEs as we do it always now.
  For local <HASHTABSTR>s, ensure system names are defined locally.
  Define new argument to <Tokenize_EM> to handle AFOs.

EXECMFN.H:
  Define new shorthands for various symbols.

EXTERNS.H:
  Define new CSO for use in <symtab.c> with HshTabs.
  As we changed the flags in <TKFLAGS>, make corresponding change to <tkZero> and <tkBlank>.

FH_PARSE.H:
  Move <DFN_TYPES> from <fh_parse.h> to <enums.h>.
  Define new flags for AFOs in <DFN_HEADER>.
  Define local <HASHTABSTR> in <DFN_HEADER> for use with AFOs.
  Improve comments.
  Define new flags for AFOs in <FHLOCALVARS>.

FH_PARSE.PROTO:
  Fill in missing prototypes.

FH_PARSE.Y:
  Include <fh_parse.proto> instead of individual prototypes.
  Improve comments.
  In <fh_yylex>, handle AFOs.

FREE.C:
  Update copyright year.
  In <FreeResNNU>, disallow freeing AFOs.
  In <FreeResultSub>, <FreeResultGlobalDfn>, and <FreeResultGlobalFcn>, handle AFOs.

GETFNS.C:
  In <GetGlbPtrs_LOCK>, handle AFOs.
  Simplify <GetSteZero>, <GetSteOne>, <GetSteBlank> by using the value in the local <HASHTABSTR>.
  Simplify <Get/SetQuadXX> functions by using fewer intermediate vars.
  In <GetPrimFlagsPtr>, handle AFOs.
  Include debug stmt in <GetSignatureGlb>.

HEADERS.H:
  Re-order headers to handle various dependencies.

IDENTFNS.C:
  Update copyright year.
  Move <steXXXX> entries from <pertab.h> to <symtab.h> for localization purposes.

IMMEXEC.C:
  Define #defines for display of []DM.
  Define new argument to <Tokenize_EM> to handle AFOs.
  In <ImmExecStmtInThread>, handle additional exit types.

MAIN.C:
  Initialize a critical section object.

MAIN32.DEF:
MAIN64.DEF:
  Omit NAME attribute as it conflicts with /OUT:name
  Increase the size of the stack.

MAKEFILE.INC:
MAKEFILE.SRC:
  Define entries for new module.

NARS2000.32.VCPROJ:
NARS2000.64.VCPROJ:
  Include new module <afofns.c>.

PERTAB.H:
PF_UARROW.C:
PO_SLASH.C:
  Move <steXXXX> entries from <pertab.h> to <symtab.h> for localization purposes.

PF_UTACKJOT.C:
  Handle <EXITTYPE_STOP> as in <STACK FULL> instead of No Value.
  Define new argument to <Tokenize_EM> to handle AFOs.

PL_PARSE.H:
  Define new fields in <PL_YYSTYPE> and <PLLOCALVARS> strucs for AFOs.

PL_PARSE.PROTO:
  Fill in missing prototypes.

PL_PARSE.Y:
  Remove <DEF_MAX_EXEC_DEPTH> in favor of testing for <EXCEPTION_STACK_OVERFLOW>.
  Include <pl_parse.proto> instead of individual prototypes.
  Define new terminals for AFOs.
  Improve comments.
  Handle AFOs in the LALR parser semantics.
  Delete <EXCEPTION_STACK_FULL> in favor of <EXCEPTION_STACK_OVERFLOW>.
  In <pl_yylex>, handle AFOs.

PL_PROC.C:
  Define new argument to <LookaheadAdjacent> to indicate whether or not to treat a Jot as an operator.
  In <LookaheadAdjacent>, <LookaheadDyadicOp>, <LookbehindOp>, and <ArrExprCheckCaller>, handle AFOs.
  Define new routine to search up the SIS chain for a user-defined function/operator.

PN_PARSE.PROTO:
  Fill in missing prototypes.

PN_PARSE.Y:
  Include <pn_parse.proto> instead of individual prototypes.

PRIMFNS.C:
  In <TokenTypeFV>, <CopyArray_EM>, <IsTknTypeFcnOpr>, and <IsTknImmed>, handle AFOs.
  Move <steXXXX> entries from <pertab.h> to <symtab.h> for localization purposes.
  Define new routine to determine whether or not there is a non-execute AFO up the SIS chain.
  Define new routine to determine if a token type is that of an AFO.

PRIMSPEC.C:
  In <PrimFnValueError_EM>, append name (if any).

QF_AT.C:
  In AttributeExecProp>, handle AFOs as Magic Functions/Operators.

QF_CR.C:
QF_VR.C:
  Handle AFOs.

QF_EX.C:
  Disallow expunge of AFOs special names.

REBAR.C:
  Document AFOs in the Language Bar.

SAVEFCN.C:
  Define AFO function header templates.
  Handle AFOs when called from <SaveFunctionCom>.
  Define new argument to <Tokenize_EM> to handle AFOs.
  Improve comments.
  Delete argument to <AllocSymTab> to initialize constant STEs as we do it always now.
  In <SaveFunctionLine>, if saving an AFO call <Tokenize_EM> twice, once with surrounding braces to set valence flags,
    and once to save the token stream for the line.

SAVEFCN.H:
  Update copyright year.
  Define new flags for AFOs in <SF_FCNS>.
  Define new fields in <LW_PARAMS> struc for AFOs when called from <SaveFunctionCom>.

SC_LOAD.C:
  In <LoadWorkspaceGlobal_EM>, handle AFOs.

SC_SAVE.C:
  For AFOs, write out flag.

SESSMAN.C:
  Move <PTDMEMVIRTENUM> from <sessman.c> to <enums.h> so we can use it in prototypes.
  Delete argument to <AllocSymTab> to initialize constant STEs as we do it always now.
  In <WM_DESTROY>, handle AFOs.
  In <WM_DESTROY>, move common code to <FreeVirtUnlink>.
  Define new routine to free and relink HshTabs.

SIS.H:
  Update copyright year.
  Define new flags for AFOs in <SIS_HEADER>.

STARTADDR.H:
  Include additional names.

STRAND.C:
  Handle AFOs.

SYMTAB.C:
  In <HshTabResize_EM>, handle resizing of GlobalAlloc tables.
  Use new CSO to enable multi-thread synchronization.
  Define local-only versions of various Symbol Table functions.
  Move <steXXXX> entries from <pertab.h> to <symtab.h> for localization purposes.
  Define new routine to free hash and symbol tables.

SYMTAB.H:
  Handle AFOs.
  Move <steXXXX> entries from <pertab.h> to <symtab.h> for localization purposes.

SYSVARS.C:
  Remove unnecessary quad functions.
  Define local versions of various routines.
  Define new routines to copy and delete system vars so we start an AFO with current values.

TABCTRL.C:
  Ensure <lpMemPTD->htsPTD> is valid before using it to point to <lpSymTab>.

TOKENIZE.C:
  Include FSA rows and columns to handle AFOs.
  Use local symbol table routines.
  Handle []Z specially as it's the return value from AFOs.
  In <Tokenize_EM>, catch any exception, cleanup, and pass it on.
  Define new routine to test for AFOs special names and aliases.

TOKENIZE.H:
  Update copyright year.
  Include FSA rows and columns to handle AFOs.
  Define new fields in <TKLOCALVARS> struc for AFOs.

TOKENS.H:
  Define new tokens for AFOs.
  Improve comments.
  Define new flags in <TKFLAGS> for AFOs.
  Define new anonymous struct inside <TOKEN_DATA> to handle AFOs.

UNICODE.H:
  Define new values for AFOs.

WORKSPACE.H:
  Update copyright year.
  Define new keyword for AFOs.


Build #1135 -- Version 0.4.0.xx
-------------------------------

* Fix Bugs In Lexical Analysis Of Slantoids

Directory trunk:

EXECDFN.C:
  In <InitFcnSTEs>, handle the single token cases via a switch stmt instead of separate token type tests.

PL_PARSE.Y:
  In <pl_yylex>, after marking a name as Op1, Op2, or Op3, execute common code.
  In <pl_yylex> in <TKT_OP3NAMED>, handle as in <TKT_OP3IMMED>.
  In <pl_yylex> in <TKT_OP3IMMED>, handle Left Paren and Var as defining a primitive function.

PL_PROC.C:
  In <CheckNullOp3>, pass in the current token to use to test for a NullOp followed by an Op3.


Build #1134 -- Version 0.4.0.xx
-------------------------------

* Fix Bug In Customize When Saving []RL

Directory trunk:

COMMON.C:
  Define 64-bit version of <GetDlgItemInt>.

CUSTOMIZE.C:
  When saving the value in a CLEAR WS of []RL, be sure to use a function that can handle 64-bit integers.

INIFILE.C:
  Check for  the []RL bug in Customize and convert a value of zero to the default seed.


Build #1133 -- Version 0.4.0.xx
-------------------------------

* Split Out Syntax Coloring From Tokenization

Directory trunk:

EDITFCN.C:
  Use separate FSA routines for Syntax Coloring.
  Delete CSO re-entrant guard as Syntax Coloring no longer conflicts with Tokenization.

TOKENIZE.C:
  Define new Syntax Coloring functions in the FSA.
  Move Syntax Coloring code to separate functions.

TOKENIZE.H:
  Update copyright year.
  Define new Syntax Coloring functions in the FSA.


Build #1132 -- Version 0.4.0.xx
-------------------------------

* Miscellaneous VS Changes

Directory trunk:

NARS2000.32.VCPROJ:
NARS2000.64.VCPROJ:
  Put <_STDINT_H> in the preprocessor definitions for use with MPIR.
  Note dependence on Definitions File.
  Move <??_proc.c> files to alphabetic order.


Build #1131 -- Version 0.4.0.xx
-------------------------------

* Fix Yet Another Bug In Temp Variable Re-use

Directory trunk:

SC_COPY.C:
  In <CopyWsFcns>, move the call to <CHECK_TEMP_OPEN> to after the following goto and return.


Build #1130 -- Version 0.4.0.xx
-------------------------------

* Fix Bug When Pressing Ctrl-Break In Immediate Execution Mode

Directory trunk:

ERRMSG.C:
  Handle case where the incoming SIS ptr is NULL, indicating we should set []DM to ''.

PL_PARSE.Y:
  Call <BreakMessage> every time we are about to execute []ALX, not just from non-immediate execution mode.


Build #1129 -- Version 0.4.0.xx
-------------------------------

* Fix Bug In Error Message When Calling []EC '2a'

Directory trunk:

ERRMSG.C:
  Fix bug in <ErrorMessageDirect> when calling []EC '2a' where the <DFNTYPE_ERRCTRL> case isn't handled.


Build #1128 -- Version 0.4.0.xx
-------------------------------

* Fix Bug In []FX

Directory trunk:

QF_FX.C:
  Update copyright year.
  Fix bug in <SysFnMonFX_EM_YY> when fixing a function from a nested vector with a scalar item.


Build #1127 -- Version 0.4.0.xx
-------------------------------

* Fix Another Bug In Temp Variable Re-use

Directory trunk:

SC_COPY.C:
  In <CmdCopy_EM>, omit calls to <xxx_TEMP_OPEN> macros as we don't need
    to protect <lpwszTemp> in this function.


Build #1126 -- Version 0.4.0.xx
-------------------------------

* Fix Bug In Lexer With Lookahead Of Ambiguous Operator Left Operand

Directory trunk:

PL_PARSE.Y:
  Fix bug in lexer with lookahead of ambiguous operator left operand.


Build #1125 -- Version 0.4.0.xx
-------------------------------

* Fix Bug In Rank Operator Definition

Directory trunk:

PO_DIJOT.C:
  Fix bug in definition of Rank operator.


Build #1124 -- Version 0.4.0.xx
-------------------------------

* Reorganize Parser Functions Moving Ancillary Functions To <??_proc.c>

Directory trunk:

COMPRO.H:
  Include prototypes for new files.

CS_PARSE.Y:
  Omit unnecessary #include.

EXTERNS.H:
  Move Point Notation prototypes from <pn_parse.y> for use in <pn_proc.c>.

FH_PARSE.PROTO:
  Remove obsolete prototypes moved to <fh_proc.pro>.

FH_PARSE.Y:
  Update copyright year.
  Omit unnecessary #includes.
  Move all ancillary functions to <fh_proc.c>.

FH_PROC.C:
  Define new file to hold ancillary functions.
  Move all ancillary functions to <fh_proc.c>.

HEADERS.H:
  Reorganize headers for new dependencies.

MAKEFILE.INC:
MAKEFILE.SRC:
NARS2000.32.VCPROJ:
NARS2000.64.VCPROJ:
  Include entries for new files.

PL_PARSE.PROTO:
  Remove obsolete prototypes moved to <pl_proc.pro>.

PL_PARSE.Y:
  Omit unnecessary #includes.
  Move all ancillary functions to <pl_proc.c>.

PL_PROC.C:
  Define new file to hold ancillary functions.
  Move all ancillary functions to <pl_proc.c>.

PN_PARSE.PROTO:
  Remove obsolete prototypes moved to <pn_proc.pro>.

PN_PARSE.Y:
  Omit unnecessary #includes.
  Move all ancillary functions to <pn_proc.c>.

PN_PROC.C:
  Define new file to hold ancillary functions.
  Move all ancillary functions to <pn_proc.c>.


Build #1123 -- Version 0.4.0.xx
-------------------------------

* Reduce Tokenization Failures

Directory trunk:

TOKENIZE.C:
  Use <bSyntErr> flag to mark stmts as SYNTAX ERRORs instead of failing tokenization.

TOKENS.H:
  Define flag to mark a stmt as a SYNTAX ERROR.


Build #1122 -- Version 0.4.0.xx
-------------------------------

* Fix Bug In Temp Variable Re-use

Directory trunk:

SC_COPY.C:
SC_LOAD.C:
  Protect data in <lpMemPTD->lpwszTemp> around call to <ParseSavedWsFcns>.
  Use <xxx_TEMP_OPEN> macros around calls to <ParseSavedWsFcns_EM> to catch bugs.


Build #1121 -- Version 0.4.0.xx
-------------------------------

* Fix More Code Page Bugs

Directory trunk:

DEFINES.H:
MAIN.RC:
PF_BAR.C:
  Replace ASCII chars in the range [128, 255] with the appropriate UTF16_xxxx and WS_UTF16_xxxx defines.

VER.RC:
  Increment version # to 0.4.0.xx.
  Replace ASCII chars in the range [128, 255] with the appropriate UTF16_xxxx and WS_UTF16_xxxx defines.
